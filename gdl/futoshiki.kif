;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Futoshiki.
;;;
;;; Fill the grid with numbers such that each number appears once in each row
;;; and column and the inequalities are obeyed.
;;;
;;; - < - < -   -                  1 < 3 < 4   2
;;;
;;; -   2   -   -                  4   2   3   1
;;;             ^      ----->                  ^
;;; -   -   -   -                  2   4   1   3
;;;
;;; -   - < -   -                  3   1 < 2   4
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(role robot)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Base propositions.
;
; - Each cell has a number or "blank".
; - The player can have chosen to quit.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (base (cell ?row ?col ?n))
    (number ?row)
    (number ?col)
    (number ?n))

(<= (base (cell ?row ?col blank))
    (number ?row)
    (number ?col))

(base finished)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Inputs.
;
; - Each turn consists of placing a number in a cell.
; - The player can choose to quit.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (input robot (place ?row ?col ?n))
    (number ?row)
    (number ?col)
    (number ?n))

(input robot quit)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Initial state.
;
; - Some cells are filled, the rest are blank.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(init (cell 1 1 blank))
(init (cell 1 2 blank))
(init (cell 1 3 blank))
(init (cell 1 4 blank))
(init (cell 2 1 blank))
(init (cell 2 2 2))
(init (cell 2 3 blank))
(init (cell 2 4 blank))
(init (cell 3 1 blank))
(init (cell 3 2 blank))
(init (cell 3 3 blank))
(init (cell 3 4 blank))
(init (cell 4 1 blank))
(init (cell 4 2 blank))
(init (cell 4 3 blank))
(init (cell 4 4 blank))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Legal moves.
;
; A number n can be placed in a cell (row, col) iff...
;
; - the cell is blank.
; - it doesn't violate a rule.
;
; A placement violates a rule iff...
;
; - n has already been placed in col.
; - n has already been placed in row.
; - n is the source of a constraint and the target has a greater number.
; - n is the target of a constraint and the source has a smaller number.
;
; The player can always quit (which will become the only legal move at some
; point following a mistake).
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (legal robot (place ?row ?col ?n))
    (true (cell ?row ?col blank))
    (number ?n)
    (not (illegal ?row ?col ?n)))

(<= (illegal ?row ?col ?n)
    (number ?row)
    (true (cell ?row2 ?col ?n)))

(<= (illegal ?row ?col ?n)
    (number ?col)
    (true (cell ?row ?col2 ?n)))

(<= (illegal ?row ?col ?n)
    (gt_constraint ?row ?col ?row2 ?col2)
    (true (cell ?row2 ?col2 ?n2))
    (gt ?n2 ?n))

(<= (illegal ?row ?col ?n)
    (gt_constraint ?row2 ?col2 ?row ?col)
    (true (cell ?row2 ?col2 ?n2))
    (gt ?n ?n2))

(legal robot quit)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Next state calculations.
;
; - Cells with numbers retain their numbers.
; - Blank cells remain blank unless played on.
; - Cells that are played on gain the number placed.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (next (cell ?row ?col ?n))
    (true (cell ?row ?col ?n))
    (number ?n))

(<= (next (cell ?row ?col blank))
    (true (cell ?row ?col blank))
    (does robot (place ?row2 ?col2 ?n))
    (distinct ?row ?row2))

(<= (next (cell ?row ?col blank))
    (true (cell ?row ?col blank))
    (does robot (place ?row2 ?col2 ?n))
    (distinct ?col ?col2))

(<= (next (cell ?row ?col blank))
    (true (cell ?row ?col blank))
    (does robot quit))

(<= (next (cell ?row ?col ?n))
    (does robot (place ?row ?col ?n)))

(<= (next finished)
    (does robot quit))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Terminality.
;
; The game is over when there are no blank cells remaining or when the player
; quits.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= terminal
    filled)

(<= filled
    (not anyblank))

(<= anyblank
    (true (cell ?row ?col blank)))

(<= terminal
    (true finished))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Goal.
;
; - If there are any blank cells, the player scores 0.
; - Otherwise score 100.  (The other requirements are always met because of the
;   legals.)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (goal robot 0)
    (true (cell ?row ?col blank)))

(<= (goal robot 100)
    (not (goal robot 0)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; General functions.
;
; - Numbers appear on the either side of the successor relation.
; - The greater-than relation (gt).
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(<= (number ?n)
    (succ ?n ?m))

(<= (number ?m)
    (succ ?n ?m))

(<= (gt ?n1 ?n2)
    (succ ?n2 ?n1))

(<= (gt ?n1 ?n3)
    (succ ?n2 ?n1)
    (gt ?n2 ?n3))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Reflect the contraints as propositions for the benefit of the visualization.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (base (cell_gt_right ?row ?col))
    (number ?row)
    (number ?col))

(<= (base (cell_lt_right ?row ?col))
    (number ?row)
    (number ?col))

(<= (base (cell_gt_below ?row ?col))
    (number ?row)
    (number ?col))

(<= (base (cell_lt_below ?row ?col))
    (number ?row)
    (number ?col))

(<= (init (cell_gt_right ?row ?col1))
    (succ ?col1 ?col2)
    (gt_constraint ?row ?col1 ?row ?col2))

(<= (init (cell_lt_right ?row ?col1))
    (succ ?col1 ?col2)
    (gt_constraint ?row ?col2 ?row ?col1))

(<= (init (cell_gt_below ?row1 ?col))
    (succ ?row1 ?row2)
    (gt_constraint ?row1 ?col ?row2 ?col))

(<= (init (cell_lt_below ?row1 ?col))
    (succ ?row1 ?row2)
    (gt_constraint ?row2 ?col ?row1 ?col))

(<= (next (cell_gt_right ?row ?col))
    (true (cell_gt_right ?row ?col)))

(<= (next (cell_lt_right ?row ?col))
    (true (cell_lt_right ?row ?col)))

(<= (next (cell_gt_below ?row ?col))
    (true (cell_gt_below ?row ?col)))

(<= (next (cell_lt_below ?row ?col))
    (true (cell_lt_below ?row ?col)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Data specific to this instance of the problem.
;
; - The successor relation (of the correct size for the puzzle in question).
; - The inequalities.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(succ  1  2)
(succ  2  3)
(succ  3  4)

(gt_constraint 1 2 1 1)
(gt_constraint 1 3 1 2)
(gt_constraint 3 4 2 4)
(gt_constraint 4 3 4 2)
